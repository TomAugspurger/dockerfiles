#!/usr/bin/env python
import sys
import argparse
import subprocess
import inspect


class Command(object):
    Description = None

    def __init__(self):
        self.argparser = argparse.ArgumentParser(self.Description)
        self.addArgs()
        self.args = self.argparser.parse_args()

    def _addArg(self, *args, **kwargs):
        self.argparser.add_argument(*args, **kwargs)

    def addArgs(self):
        pass

    def getDescription(self):
        raise NotImplementedError

    def execute(self):
        raise NotImplementedError

    def _dockercmd(self, *args):
        cmd = "docker " + " ".join(args)
        self._runcmd(cmd)

    def _runcmd(self, cmd):
        subprocess.check_call(cmd, shell=True)


class help(Command):
    Description = "Prints this help message"

    def execute(self):
        cmds = self.__getAllCommands()
        print("List of commands:")
        gl = globals()
        for cmd in cmds:
            print(" . %s -- %s" % (cmd, gl[cmd].Description))

    def __getAllCommands(self):
        gl = globals()
        cmds = []
        for name in gl.keys():
            typ = gl[name]
            if inspect.isclass(typ) and issubclass(typ, Command) and \
               typ != Command:
                cmds.append(name)
        return cmds


class rpush(Command):
    Description = "Tags docker image and pushes it to a registry for a later pull"

    def addArgs(self):
        self._addArg("-r", help="Registry prefix for the image", type=str,
                     default="nvcr.io/nvidian_general/teju85-")
        self._addArg("img", help="Name of the local image to be pushed", type=str,
                     nargs="*")

    def execute(self):
        for here in self.args.img:
            there = self.args.r + here
            self._dockercmd("tag", here, there)
            self._dockercmd("push", there)
            self._dockercmd("rmi", there)


class rpull(Command):
    Description = "Pulls docker image from a registry and tags it for local usage"

    def addArgs(self):
        self._addArg("-r", help="Registry prefix for the image", type=str,
                     default="nvcr.io/nvidian_general/teju85-")
        self._addArg("img", help="Name of the local image to be pulled", type=str,
                     nargs="*")

    def execute(self):
        for here in self.args.img:
            there = self.args.r + here
            self._dockercmd("pull", there)
            self._dockercmd("tag", there, here)
            self._dockercmd("rmi", there)


if __name__ == "__main__":
    if len(sys.argv) < 2:
        raise Exception("Usage: do <cmd>")
    cmd = sys.argv[1]
    del sys.argv[0]
    clz = globals()[cmd]
    clz().execute()
